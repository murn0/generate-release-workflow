name: check-milestone
on:
  workflow_call:
    inputs:
      pull_requests:
        required: true
        type: string
      RELEASE_VERSION:
        required: true
        type: string
    outputs:
      MILESTONE_NUMBER:
        description: "Milestone number of the same title as the new release version"
        value: ${{jobs.check-milestone.outputs.MILESTONE_NUMBER}}

permissions: {}

jobs:
  check-milestone:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    outputs:
      MILESTONE_NUMBER: ${{steps.milestone.outputs.MILESTONE_NUMBER}}
    steps:
      - name: Check to see if milestones exist and create or reopen them
        id: milestone
        run: |
          set -eu

          milestones=$(gh api -X GET /repos/${{github.repository}}/milestones -f state=all)
          #=> $RELEASE_VERSIONと同じタイトルのマイルストーンが存在しない場合は作成する
          if ! echo "${milestones}" | jq ". | any(.title == \"$RELEASE_VERSION\")"; then
            gh api -X POST repos/${{github.repository}}/milestones -f title="$RELEASE_VERSION"
            #=> マイルストーンを新規作成した場合は$milestonesを更新（更新しないと下記でマイルストーン番号が取得できないため）
            milestones=$(gh api -X GET /repos/${{github.repository}}/milestones -f state=all)
          elif echo "${milestones}" | jq ". | any(.title == \"$RELEASE_VERSION\" and .state == \"closed\")"; then
            #=> マイルストーンが存在するがcloseの場合は再度openする
            milestone_number=$(echo "${milestones}" | jq ". | map(select(.title == \"$RELEASE_VERSION\")) | first | .number")
            gh api -X PATCH repos/${{github.repository}}/milestones/"$milestone_number" -f state=open
          fi

          milestone_number=$(echo "${milestones}" | jq ". | map(select(.title == \"$RELEASE_VERSION\")) | first | .number")
          echo "$milestone_number"
          echo "MILESTONE_NUMBER=$milestone_number" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{github.token}}
          RELEASE_VERSION: ${{inputs.RELEASE_VERSION}}
  add-milestone:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - run: |
          pull_requests=${{inputs.pull_requests}}
          
          # カンマで分割して配列に格納
          IFS=',' read -ra pr_array <<< "$pull_requests"

          for pr_number in "${pr_array[@]}"; do
              gh pr -R ${{github.repository}} edit "$pr_number" --milestone "$RELEASE_VERSION"
          done
        env:
          GITHUB_TOKEN: ${{github.token}}
          RELEASE_VERSION: ${{inputs.RELEASE_VERSION}}